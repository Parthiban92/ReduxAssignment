{"version":3,"sources":["reducers/reducer.js","reducers/index.js","actions/types.js","store.js","components/ReduxSelect.js","actions/postActions.js","components/Select.js","components/App.js","index.js"],"names":["initialState","items","item","combineReducers","posts","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","applyMiddleware","ReduxSelect","handleChange","props","fetchPosts","product","sub_product","bind","fetch","then","res","json","data","setState","this","postItems","map","p","value","_id","productName","className","onChange","team","key","id","Component","mapDispatchToProps","dispatch","connect","Select","e","console","log","title","body","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAEMA,EAAe,CACnBC,MAAO,GACPC,KAAM,ICDOC,cAAgB,CAC7BC,MDGa,WAAyC,IAA/BC,EAA8B,uDAAtBL,EAAcM,EAAQ,uCAErD,OAAQA,EAAOC,MACb,IEVe,aFWb,OAAO,2BACFF,GADL,IAEEJ,MAAM,YAAKK,EAAOE,WAItB,QACE,OAAOH,MGZPI,EAAa,CAACC,KAILC,EAFDC,YAAYC,EAJL,GAI8BC,IAAe,WAAf,EAAmBL,I,WCJhEM,E,kDAEL,aACC,IAAD,8BACC,gBAeAC,aAAc,WACX,EAAKC,MAAMC,cAfd,EAAKb,MAAO,CAACc,QAAQ,GAAGC,YAAY,IACnC,EAAKJ,aAAe,EAAKA,aAAaK,KAAlB,gBAHtB,E,gEAOC,IAAD,OACGC,MAAM,yDACLC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GAEJ,EAAKC,SAAS,CAACR,QAAQO,S,+BAQjB,IACAtB,EAAUwB,KAAKX,MAAfb,MACFyB,EAAYzB,GAASA,EAAM0B,KAAI,SAAAC,GAAC,OAElC,4BAASC,MAAOD,EAAEE,KAAMF,EAAEG,gBAI9B,OAEG,yBAAKC,UAAU,OACf,4CACG,6BACI,4BAAQC,SAAUR,KAAKZ,cACjB,wDACKY,KAAKvB,MAAMc,QAAQW,KAAI,SAACO,GAAD,OAAU,4BAAQC,IAAKD,EAAKJ,IAAKD,MAAOK,EAAKE,IAAKF,EAAKH,kBAI7F,6BACI,4BAAQE,SAAUR,KAAKZ,cACrB,wDACOa,S,GA7CGW,aAyDpBC,EAAqB,CAAEvB,WC3D7B,WACE,OAAO,SAACwB,GACNpB,MAAM,yDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAnB,GAAK,OAAIsC,EAAS,CACtBnC,KHPW,aGQXC,QAASJ,UDuDFuC,eANS,SAAAtC,GAAK,MAAK,CAChCD,MAAOC,EAAMD,MAAMH,SAKmBwC,EAAzBE,CAA6C5B,GEI7C6B,E,kDA7Dd,aACC,IAAD,8BACC,gBAeD5B,aAAc,SAAC6B,GACXvB,MAAM,yDACNC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GACLoB,QAAQC,IAAIrB,GACX,EAAKC,SAAS,CAACP,YAAYM,IAC3B,EAAKrB,MAAMe,YAAYU,KAAI,SAACO,GAGzBS,QAAQC,IAAIV,UAvBnB,EAAKhC,MAAO,CAACc,QAAQ,GAAGC,YAAY,IACnC,EAAKJ,aAAe,EAAKA,aAAaK,KAAlB,gBAHtB,E,gEAOC,IAAD,OACGC,MAAM,yDACLC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAG,GAEJ,EAAKC,SAAS,CAACR,QAAQO,S,+BAkBjB,IAAD,EACiBE,KAAKvB,MADtB,EACC2C,MADD,EACQC,KACf,OACE,6BAEC,yBAAKd,UAAU,OACT,6CACC,6BACE,4BAAQC,SAAUR,KAAKZ,cACnB,wDACKY,KAAKvB,MAAMc,QAAQW,KAAI,SAACO,GAAD,OAAU,4BAAQC,IAAKD,EAAKJ,IAAKD,MAAOK,EAAKE,IAAKF,EAAKH,kBAG7F,6BACD,4BAAQE,SAAUR,KAAKZ,cAChB,wDAEKY,KAAKvB,MAAMe,YAAYU,KAAI,SAACO,GAAD,OAC1B,4BAAQC,IAAKD,EAAKJ,IAAKD,MAAOK,EAAKE,IAAKF,EAAKH,wB,GAnD9CM,aCGAU,G,6KAEjB,OACE,kBAAC,IAAD,CAAUvC,MAAOA,GACf,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,W,GANyB6B,cCHjCW,IAASC,OAEP,kBAAC,IAAMC,WAAP,KAEU,kBAAC,EAAD,OAGVC,SAASC,eAAe,W","file":"static/js/main.c0fc5311.chunk.js","sourcesContent":["import { FETCH_POST, NEW_POST } from '../actions/types';\n\nconst initialState = {\n  items: [],\n  item: {}\n}\n\nexport default function (state = initialState, action) {\n\n  switch (action.type) {\n    case FETCH_POST:\n      return {\n        ...state,\n        items: [...action.payload]\n      }\n      break;\n   \n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport reducer from './reducer';\n\nexport default combineReducers({\n  posts: reducer\n});","const FETCH_POST = 'FETCH_POST';\nexport { FETCH_POST};","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer,initialState,applyMiddleware(...middleware));\n\nexport default store;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postActions';\n \nclass ReduxSelect extends Component {\n\n constructor()\n {\n  super()\n  this.state ={product:[],sub_product:[]}\n   this.handleChange = this.handleChange.bind(this);\n }\n\n  componentDidMount()\n {\n    fetch('https://ngproductsparam.herokuapp.com/api/getProducts')\n    .then(res=> res.json())\n    .then(data => {\n    // console.log(data)\n      this.setState({product:data})\n    })\n }\n\n  handleChange =()=>{\n     this.props.fetchPosts();\n  } \n\n  render() {\n    const { posts } = this.props;\n    const postItems = posts && posts.map(p => (\n      \n        <option  value={p._id}>{p.productName}</option>\n        \n     \n    ))\n    return (\n      \n       <div className=\"App\">\n       <h1>Redux Select</h1>\n          <div>\n              <select onChange={this.handleChange}>\n                    <option> -- Please Select --</option>                                    \n                        {this.state.product.map((team) => <option key={team._id} value={team.id}>{team.productName}</option>)}\n              </select>\n               \n          </div>\n          <div>\n              <select onChange={this.handleChange}>\n                <option> -- Please Select --</option>                                    \n                      {postItems}\n              </select>\n       </div>\n    </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  posts: state.posts.items\n});\n\nconst mapDispatchToProps = { fetchPosts };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxSelect);","import { FETCH_POST, NEW_POST } from './types';\n\nfunction fetchPosts() {\n  return (dispatch) => {\n    fetch('https://ngproductsparam.herokuapp.com/api/getProducts')\n      .then(res => res.json())\n      .then(posts => dispatch({\n        type: FETCH_POST,\n        payload: posts\n      }));\n  }\n}\n\n\n\nexport { fetchPosts };","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { createPost } from '../actions/postActions';\n\nclass Select extends Component {\n\n constructor()\n {\n  super()\n  this.state ={product:[],sub_product:[]}\n   this.handleChange = this.handleChange.bind(this);\n }\n\n componentDidMount()\n {\n    fetch('https://ngproductsparam.herokuapp.com/api/getProducts')\n    .then(res=> res.json())\n    .then(data => {\n    // console.log(data)\n      this.setState({product:data})\n    })\n }\n\n handleChange =(e)=>{\n     fetch('https://ngproductsparam.herokuapp.com/api/getProducts')\n    .then(res=> res.json())\n    .then(data => {\n     console.log(data)\n      this.setState({sub_product:data})\n      this.state.sub_product.map((team) =>\n        \n      {\n         console.log(team)\n      })\n    })\n }\n\n  render() {\n    const { title, body } = this.state;\n    return (\n      <div>\n       \n       <div className=\"App\">\n             <h1>Normal Select</h1>\n              <div>\n                <select onChange={this.handleChange}>\n                    <option> -- Please Select --</option>                                    \n                        {this.state.product.map((team) => <option key={team._id} value={team.id}>{team.productName}</option>)}\n              </select>\n          </div>\n          <div>\n         <select onChange={this.handleChange}>\n                <option> -- Please Select --</option>                                                 \n                {\n                     this.state.sub_product.map((team) =>\n                      <option key={team._id} value={team.id}>{team.productName}</option>\n                )}\n              </select>\n       </div>\n    </div>\n      </div>\n    )\n  }\n}\n\n\n\nexport default Select;","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from '../store';\nimport ReduxSelect from './ReduxSelect';\nimport Select from './Select';\nimport './App.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Select />\n        <hr />\n        <ReduxSelect />\n      </Provider>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    \n  <React.StrictMode>\n        \n            <App />\n \n  </React.StrictMode>, \n  document.getElementById('root')\n);"],"sourceRoot":""}